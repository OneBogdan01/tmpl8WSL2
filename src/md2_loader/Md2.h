#pragma once

//this is taken from https://github.com/raydelto/md2loader-glfw
#include <cstdio>
#include <cstdlib>
#include "glm/glm.hpp"
#include "glm/gtc/matrix_transform.hpp"

#include <vector>
#include <map>
#include <memory>
#include "template.h"
class ShaderProgram;
class Texture2D;

namespace md2model
{
	struct vertex
	{
		float f[8];
		unsigned char n;
	};

	struct header
	{
		int id;
		int version;
		int twidth;
		int theight;
		int framesize;
		int textures;
		int vNum;
		int tNum;
		int fNum;
		int numGLcmds;
		int Number_Of_Frames;
		int offsetSkins;
		int offsetTCoord;
		int offsetIndx;
		int offsetFrames;
		int offsetGLcmds;
		int offsetEnd;
	};

	struct textcoord
	{
		float s;
		float t;
	};

	struct textindx
	{
		short s;
		short t;
	};

	struct framePoint_t
	{
		unsigned char v[3];
		unsigned char normalIndex;
	};

	struct frame
	{
		float scale[3];
		float translate[3];
		char name[16];
		framePoint_t fp[1];
	};

	struct mesh
	{
		unsigned short meshIndex[3];
		unsigned short stIndex[3];
	};

	struct vector
	{
		float point[3];
		float normal[3];
	};

	struct modData
	{
		int numFrames;
		int numPoints;
		int numTriangles;
		int numST;
		int frameSize;
		int twidth;
		int theight;
		int currentFrame;
		int nextFrame;
		float interpol;
		mesh* triIndx;
		textcoord* st;
		md2model::vector* pointList;
		float x, y, z;
		float nextX, nextY, nextZ;
		float radius;
		float dist_to_player;
		int state;
		float speed;
	};

	class Md2
	{
	private:
		void LoadModel(const char* md2FileName);
		void LoadTexture(const char* textureFileName);
		void InitBuffer();

		std::unique_ptr<modData> m_model;
		std::unique_ptr<Texture2D> m_texture;
		std::vector<GLuint> m_vaoIndices;
		std::vector<GLuint> m_vboIndices;
		std::unique_ptr<ShaderProgram> m_shaderProgram;
		std::map<int, std::pair<int, int>> m_frameIndices;
		bool m_pause;
		glm::vec3 m_position;
		bool m_modelLoaded;
		bool m_textureLoaded;
		bool m_bufferInitialized;

	public:
		Md2(const char* md2FileName, const char* textureFileName);
		~Md2();
		//The frame parameter start at 0
		void Draw(int frame, float angle, float interpolation, glm::mat4&& view, glm::mat4&& projection);
		void SetPosition(glm::vec3 position);

		void SetPause(bool pause)
		{
			m_pause = pause;
		}

	private:
		glm::vec3 normals[162] = {
			{-0.525731f, 0.000000f, 0.850651f},
			{-0.442863f, 0.238856f, 0.864188f},
			{-0.295242f, 0.000000f, 0.955423f},
			{-0.309017f, 0.500000f, 0.809017f},
			{-0.162460f, 0.262866f, 0.951056f},
			{0.000000f, 0.000000f, 1.000000f},
			{0.000000f, 0.850651f, 0.525731f},
			{-0.147621f, 0.716567f, 0.681718f},
			{0.147621f, 0.716567f, 0.681718f},
			{0.000000f, 0.525731f, 0.850651f},
			{0.309017f, 0.500000f, 0.809017f},
			{0.525731f, 0.000000f, 0.850651f},
			{0.295242f, 0.000000f, 0.955423f},
			{0.442863f, 0.238856f, 0.864188f},
			{0.162460f, 0.262866f, 0.951056f},
			{-0.681718f, 0.147621f, 0.716567f},
			{-0.809017f, 0.309017f, 0.500000f},
			{-0.587785f, 0.425325f, 0.688191f},
			{-0.850651f, 0.525731f, 0.000000f},
			{-0.864188f, 0.442863f, 0.238856f},
			{-0.716567f, 0.681718f, 0.147621f},
			{-0.688191f, 0.587785f, 0.425325f},
			{-0.500000f, 0.809017f, 0.309017f},
			{-0.238856f, 0.864188f, 0.442863f},
			{-0.425325f, 0.688191f, 0.587785f},
			{-0.716567f, 0.681718f, -0.147621f},
			{-0.500000f, 0.809017f, -0.309017f},
			{-0.525731f, 0.850651f, 0.000000f},
			{0.000000f, 0.850651f, -0.525731f},
			{-0.238856f, 0.864188f, -0.442863f},
			{0.000000f, 0.955423f, -0.295242f},
			{-0.262866f, 0.951056f, -0.162460f},
			{0.000000f, 1.000000f, 0.000000f},
			{0.000000f, 0.955423f, 0.295242f},
			{-0.262866f, 0.951056f, 0.162460f},
			{0.238856f, 0.864188f, 0.442863f},
			{0.262866f, 0.951056f, 0.162460f},
			{0.500000f, 0.809017f, 0.309017f},
			{0.238856f, 0.864188f, -0.442863f},
			{0.262866f, 0.951056f, -0.162460f},
			{0.500000f, 0.809017f, -0.309017f},
			{0.850651f, 0.525731f, 0.000000f},
			{0.716567f, 0.681718f, 0.147621f},
			{0.716567f, 0.681718f, -0.147621f},
			{0.525731f, 0.850651f, 0.000000f},
			{0.425325f, 0.688191f, 0.587785f},
			{0.864188f, 0.442863f, 0.238856f},
			{0.688191f, 0.587785f, 0.425325f},
			{0.809017f, 0.309017f, 0.500000f},
			{0.681718f, 0.147621f, 0.716567f},
			{0.587785f, 0.425325f, 0.688191f},
			{0.955423f, 0.295242f, 0.000000f},
			{1.000000f, 0.000000f, 0.000000f},
			{0.951056f, 0.162460f, 0.262866f},
			{0.850651f, -0.525731f, 0.000000f},
			{0.955423f, -0.295242f, 0.000000f},
			{0.864188f, -0.442863f, 0.238856f},
			{0.951056f, -0.162460f, 0.262866f},
			{0.809017f, -0.309017f, 0.500000f},
			{0.681718f, -0.147621f, 0.716567f},
			{0.850651f, 0.000000f, 0.525731f},
			{0.864188f, 0.442863f, -0.238856f},
			{0.809017f, 0.309017f, -0.500000f},
			{0.951056f, 0.162460f, -0.262866f},
			{0.525731f, 0.000000f, -0.850651f},
			{0.681718f, 0.147621f, -0.716567f},
			{0.681718f, -0.147621f, -0.716567f},
			{0.850651f, 0.000000f, -0.525731f},
			{0.809017f, -0.309017f, -0.500000f},
			{0.864188f, -0.442863f, -0.238856f},
			{0.951056f, -0.162460f, -0.262866f},
			{0.147621f, 0.716567f, -0.681718f},
			{0.309017f, 0.500000f, -0.809017f},
			{0.425325f, 0.688191f, -0.587785f},
			{0.442863f, 0.238856f, -0.864188f},
			{0.587785f, 0.425325f, -0.688191f},
			{0.688191f, 0.587785f, -0.425325f},
			{-0.147621f, 0.716567f, -0.681718f},
			{-0.309017f, 0.500000f, -0.809017f},
			{0.000000f, 0.525731f, -0.850651f},
			{-0.525731f, 0.000000f, -0.850651f},
			{-0.442863f, 0.238856f, -0.864188f},
			{-0.295242f, 0.000000f, -0.955423f},
			{-0.162460f, 0.262866f, -0.951056f},
			{0.000000f, 0.000000f, -1.000000f},
			{0.295242f, 0.000000f, -0.955423f},
			{0.162460f, 0.262866f, -0.951056f},
			{-0.442863f, -0.238856f, -0.864188f},
			{-0.309017f, -0.500000f, -0.809017f},
			{-0.162460f, -0.262866f, -0.951056f},
			{0.000000f, -0.850651f, -0.525731f},
			{-0.147621f, -0.716567f, -0.681718f},
			{0.147621f, -0.716567f, -0.681718f},
			{0.000000f, -0.525731f, -0.850651f},
			{0.309017f, -0.500000f, -0.809017f},
			{0.442863f, -0.238856f, -0.864188f},
			{0.162460f, -0.262866f, -0.951056f},
			{0.238856f, -0.864188f, -0.442863f},
			{0.500000f, -0.809017f, -0.309017f},
			{0.425325f, -0.688191f, -0.587785f},
			{0.716567f, -0.681718f, -0.147621f},
			{0.688191f, -0.587785f, -0.425325f},
			{0.587785f, -0.425325f, -0.688191f},
			{0.000000f, -0.955423f, -0.295242f},
			{0.000000f, -1.000000f, 0.000000f},
			{0.262866f, -0.951056f, -0.162460f},
			{0.000000f, -0.850651f, 0.525731f},
			{0.000000f, -0.955423f, 0.295242f},
			{0.238856f, -0.864188f, 0.442863f},
			{0.262866f, -0.951056f, 0.162460f},
			{0.500000f, -0.809017f, 0.309017f},
			{0.716567f, -0.681718f, 0.147621f},
			{0.525731f, -0.850651f, 0.000000f},
			{-0.238856f, -0.864188f, -0.442863f},
			{-0.500000f, -0.809017f, -0.309017f},
			{-0.262866f, -0.951056f, -0.162460f},
			{-0.850651f, -0.525731f, 0.000000f},
			{-0.716567f, -0.681718f, -0.147621f},
			{-0.716567f, -0.681718f, 0.147621f},
			{-0.525731f, -0.850651f, 0.000000f},
			{-0.500000f, -0.809017f, 0.309017f},
			{-0.238856f, -0.864188f, 0.442863f},
			{-0.262866f, -0.951056f, 0.162460f},
			{-0.864188f, -0.442863f, 0.238856f},
			{-0.809017f, -0.309017f, 0.500000f},
			{-0.688191f, -0.587785f, 0.425325f},
			{-0.681718f, -0.147621f, 0.716567f},
			{-0.442863f, -0.238856f, 0.864188f},
			{-0.587785f, -0.425325f, 0.688191f},
			{-0.309017f, -0.500000f, 0.809017f},
			{-0.147621f, -0.716567f, 0.681718f},
			{-0.425325f, -0.688191f, 0.587785f},
			{-0.162460f, -0.262866f, 0.951056f},
			{0.442863f, -0.238856f, 0.864188f},
			{0.162460f, -0.262866f, 0.951056f},
			{0.309017f, -0.500000f, 0.809017f},
			{0.147621f, -0.716567f, 0.681718f},
			{0.000000f, -0.525731f, 0.850651f},
			{0.425325f, -0.688191f, 0.587785f},
			{0.587785f, -0.425325f, 0.688191f},
			{0.688191f, -0.587785f, 0.425325f},
			{-0.955423f, 0.295242f, 0.000000f},
			{-0.951056f, 0.162460f, 0.262866f},
			{-1.000000f, 0.000000f, 0.000000f},
			{-0.850651f, 0.000000f, 0.525731f},
			{-0.955423f, -0.295242f, 0.000000f},
			{-0.951056f, -0.162460f, 0.262866f},
			{-0.864188f, 0.442863f, -0.238856f},
			{-0.951056f, 0.162460f, -0.262866f},
			{-0.809017f, 0.309017f, -0.500000f},
			{-0.864188f, -0.442863f, -0.238856f},
			{-0.951056f, -0.162460f, -0.262866f},
			{-0.809017f, -0.309017f, -0.500000f},
			{-0.681718f, 0.147621f, -0.716567f},
			{-0.681718f, -0.147621f, -0.716567f},
			{-0.850651f, 0.000000f, -0.525731f},
			{-0.688191f, 0.587785f, -0.425325f},
			{-0.587785f, 0.425325f, -0.688191f},
			{-0.425325f, 0.688191f, -0.587785f},
			{-0.425325f, -0.688191f, -0.587785f},
			{-0.587785f, -0.425325f, -0.688191f},
			{-0.688191f, -0.587785f, -0.425325f}
		};
	};
} // namespace md2model
